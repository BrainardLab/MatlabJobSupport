function awsCliScriptFile = mjsWriteAwsCliScript(jobScriptFile, varargin)
% Write a shell script that will run the given jobScriptFile, via AWS CLI.
%
% This saves us from having to write lots of AWS CLI and SSH syntax by hand.
%
% AWS CLI is the Amazon Web Services Command Line Interface.
%   https://aws.amazon.com/cli/
%
% mjsWriteAwsCliScript = mjsWriteAwsCliScript(jobScriptFile) generates a
% shell script that will cause the given jobScriptFile be executed
% remotely, via ASW CLI and SSH.  The general outline is:
%   - start an AWS EC2 instance using AWS CLI
%   - execute the jobScriptFile via SSH on the instance
%   - terminate the instance
%
% mjsWriteAwsCliScript( ... 'awsCliScriptFile', awsCliScriptFile) specify
% the name of the new AWS CLI script that should be generated.  The default
% is chosen based on the jobScriptFile.
%
% mjsWriteAwsCliScript( ... 'amiId', amiId) specify id of the Amazon
% Machine Image to use for the new EC2 instance.  The AMI should have
% Docker and Matlab already installed.
%
% mjsWriteAwsCliScript( ... 'instanceType', instanceType) specify the
% instance type to create.  For Matlab, use at least t2.small, or at least
% 2GB of memory.
%
% mjsWriteAwsCliScript( ... 'securityGroups', securityGroups) name of
% security groups that allow SSH access from here, as well as access to any
% Matlab license server that's required.
%
% mjsWriteAwsCliScript( ... 'terminate', terminate) specify whether to
% terminate the instance after the job fails or completes.  The default is
% true -- do terminate the instance.
%
% mjsWriteAwsCliScript( ... 'iamProfile', iamProfile) configure an "IAM"
% profile for the instance to use.  This an optional way to give the
% instance access to other AWS resources, like S3.
%
% scriptFile = mjsWriteAwsCliScript(varargin)
%
% 2016-2017 Brainard Lab, University of Pennsylvania

parser = inputParser();
parser.KeepUnmatched = true;
parser.addRequired('jobScriptFile', @ischar);
parser.addParameter('awsCliScriptFile', '', @ischar);
parser.addParameter('amiId', '', @ischar);
parser.addParameter('instanceType', 't2.small', @ischar);
parser.addParameter('securityGroups', {'default'}, @iscellstr);
parser.addParameter('terminate', true, @islogical);
parser.addParameter('iamProfile', '', @ischar);
parser.parse(jobScriptFile, varargin{:});
jobScriptFile = parser.Results.jobScriptFile;
awsCliScriptFile = parser.Results.awsCliScriptFile;
amiId = parser.Results.amiId;
instanceType = parser.Results.instanceType;
securityGroups = parser.Results.securityGroups;
terminate = parser.Results.terminate;
iamProfile = parser.Results.iamProfile;

% default aws cli script name based on job script name
[jobScriptPath, jobScriptBase] = fileparts(jobScriptFile);
if isempty(awsCliScriptFile)
    awsCliScriptFile = fullfile(jobScriptPath, [jobScriptBase '-aws-cli.sh']);
end


%% Make sure script dir exists.
scriptDir = fileparts(awsCliScriptFile);
if ~isempty(scriptDir) && 7 ~= exist(scriptDir, 'dir')
    mkdir(scriptDir);
end

fid = fopen(awsCliScriptFile, 'w');
if -1 == fid
    error('mjsWriteAwsCliScript:fopen', ...
        'Could not open file <%s> for writing.', scriptFile);
end

try
    fprintf(fid, '#!/bin/sh\n');
    fprintf(fid, '## Begin script generated by mjsWriteAwsCliScript.m\n');
    
    fprintf(fid, '\n');
    fprintf(fid, '## choose instance details JSON file\n');
    fprintf(fid, '## build run-instances command\n');
    fprintf(fid, '## invoke run-instances command -> details JSON\n');
    fprintf(fid, '## scrape the instance ID from JSON with jq\n');
    fprintf(fid, '## tag the new instance\n');
    fprintf(fid, '## wait for the new instance to be ready\n');
    fprintf(fid, '## update instance details -> details JSON\n');
    fprintf(fid, '## scrape the instance host name name from JSON with jq\n');
    fprintf(fid, '## store instance host name to variable -> INSTANCE_DNS_NAME: \n');
    
    fprintf(fid, '\n');
    fprintf(fid, '## do ssh part, in terms of INSTANCE_DNS_NAME variable\n');
    
    fprintf(fid, '\n');
    fprintf(fid, '## terminate the instance\n');
    fprintf(fid, '## wait for instane to be terminated \n');
    
    fprintf(fid, '## End script generated by mjsWriteAwsCliScript.m\n');
    fprintf(fid, '\n');
    
    fclose(fid);
    
catch err
    fclose(fid);
    rethrow(err);
end

system(['chmod +x ' awsCliScriptFile]);
