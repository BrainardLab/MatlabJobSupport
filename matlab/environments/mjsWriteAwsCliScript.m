function awsCliScriptFile = mjsWriteAwsCliScript(jobScriptFile, varargin)
% Write a shell script that will run the given jobScriptFile, via AWS CLI.
%
% This saves us from having to write lots of AWS CLI and SSH syntax by hand.
%
% AWS CLI is the Amazon Web Services Command Line Interface.
%   https://aws.amazon.com/cli/
%
% mjsWriteAwsCliScript = mjsWriteAwsCliScript(jobScriptFile) generates a
% shell script that will cause the given jobScriptFile be executed
% remotely, via ASW CLI and SSH.  The general outline is:
%   - start an AWS EC2 instance using AWS CLI
%   - execute the jobScriptFile via SSH on the instance
%   - terminate the instance
%
% mjsWriteAwsCliScript( ... 'awsCliScriptFile', awsCliScriptFile) specify
% the name of the new AWS CLI script that should be generated.  The default
% is chosen based on the jobScriptFile.
%
% mjsWriteAwsCliScript( ... 'amiId', amiId) specify id of the Amazon
% Machine Image to use for the new EC2 instance.  The AMI should have the
% following already installed:
%   - Docker
%   - Matlab
%   - AWS CLI (and configured for your AWS account)
%   - jq (for parsing JSON: https://stedolan.github.io/jq/)
%
% mjsWriteAwsCliScript( ... 'instanceType', instanceType) specify the
% instance type to create.  For Matlab, use at least t2.small, or at least
% 2GB of memory.
%
% mjsWriteAwsCliScript( ... 'securityGroups', securityGroups) name of
% security groups that allow SSH access from here, as well as access to any
% Matlab license server that's required.
%
% mjsWriteAwsCliScript( ... 'terminate', terminate) specify whether to
% terminate the instance after the job fails or completes.  The default is
% true -- do terminate the instance.
%
% mjsWriteAwsCliScript( ... 'iamProfile', iamProfile) configure an "IAM"
% profile for the instance to use.  This an optional way to give the
% instance access to other AWS resources, like S3.
%
% scriptFile = mjsWriteAwsCliScript(varargin)
%
% 2016-2017 Brainard Lab, University of Pennsylvania

parser = inputParser();
parser.KeepUnmatched = true;
parser.addRequired('jobScriptFile', @ischar);
parser.addParameter('awsCliScriptFile', '', @ischar);
parser.addParameter('amiId', '', @ischar);
parser.addParameter('instanceType', 't2.small', @ischar);
parser.addParameter('securityGroups', {'default'}, @iscellstr);
parser.addParameter('terminate', true, @islogical);
parser.addParameter('iamProfile', '', @ischar);
parser.addParameter('identity', '', @ischar);
parser.addParameter('diskGB', [], @isnumeric);
parser.parse(jobScriptFile, varargin{:});
jobScriptFile = parser.Results.jobScriptFile;
awsCliScriptFile = parser.Results.awsCliScriptFile;
amiId = parser.Results.amiId;
instanceType = parser.Results.instanceType;
securityGroups = parser.Results.securityGroups;
terminate = parser.Results.terminate;
iamProfile = parser.Results.iamProfile;
identity = parser.Results.identity;
diskGB = parser.Results.diskGB;

% default aws cli script name based on job script name
[jobScriptPath, jobScriptBase] = fileparts(jobScriptFile);
if isempty(awsCliScriptFile)
    awsCliScriptFile = fullfile(jobScriptPath, [jobScriptBase '-aws-cli.sh']);
end


%% Make sure script dir exists.
scriptDir = fileparts(awsCliScriptFile);
if ~isempty(scriptDir) && 7 ~= exist(scriptDir, 'dir')
    mkdir(scriptDir);
end

fid = fopen(awsCliScriptFile, 'w');
if -1 == fid
    error('mjsWriteAwsCliScript:fopen', ...
        'Could not open file <%s> for writing.', scriptFile);
end

try
    fprintf(fid, '#!/bin/sh\n');
    fprintf(fid, '## Begin script generated by mjsWriteAwsCliScript.m\n');
    
    
    %% Build AWS CLI command to request a new instance.
    runArgs = sprintf('--image-id %s --count 1 --instance-type %s --iam-instance-profile %s\n', ...
        amiId, instanceType, iamProfile);
    
    securityGroupArg = sprintf('%s ', securityGroups{:});
    runArgs = [runArgs ' --security-groups ' securityGroupArg];
    
    if ~isempty(identity)
        [~, keyName] = fileparts(identity);
        runArgs = [runArgs ' --key-name ' keyName];
    end
    
    if ~isempty(diskGB)
        diskGbArg = sprintf('[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"VolumeSize\":%d,\"DeleteOnTermination\":true,\"VolumeType\":\"gp2\"}}]', ...
            diskGB);
        runArgs = [runArgs ' --block-device-mappings ' diskGbArg];
    end
    
    
    %% Request the new instance.
    %   save result to instance detauls json file
    instanceDetailsFile = sprintf('/tmp/%s.json', jobScriptBase);
    fprintf(fid, 'aws ec2 run-instances %s > %s\n', ...
        runArgs, ...
        instanceDetailsFile);
    
    
    %% Add handy tags to the instance.
    fprintf(fid, 'INSTANCE_ID=$(jq -r ".Instances[0].InstanceId" %s)\n', ...
        instanceDetailsFile);
    
    fprintf(fid, 'aws ec2 create-tags --resources $INSTANCE_ID --tags Key=Name,Value=%s Key=Script,Value=%s\n', ...
        jobScriptBase, ...
        'mjsWriteAwsCliScript');
    
    
    %% Wait for the instance to be ready.
    fprintf(fid, 'aws ec2 wait instance-status-ok --instance-ids "$INSTANCE_ID"\n');
    
    
    %% Update the instance details, now that it's ready.
    fprintf(fid, 'aws ec2 describe-instances --instance-id $INSTANCE_ID > "%s"\n', ...
        instanceDetailsFile);
    
    fprintf(fid, 'INSTANCE_DNS_NAME=$(jq -r ".Reservations[0].Instances[0].PublicDnsName" %s)\n', ...
        instanceDetailsFile);
    
    
    %% Insert an ssh script right here inside this aws-cli script!
    %   this is the fun part!
    fprintf(fid, '\n');
    mjsWriteSshScript(jobScriptFile, ...
        varargin{:}, ...
        'host', '$INSTANCE_DNS_NAME', ...
        'sshScriptFid', fid);
    
    if terminate
        % terminate the instance
        fprintf(fid, 'aws ec2 terminate-instances --instance-ids "$INSTANCE_ID" >> "%s"\n', ...
            instanceDetailsFile);
        
        % wait for it to be terminated
        fprintf(fid, 'aws ec2 wait instance-terminated --instance-ids "$INSTANCE_ID"\n');
    end
    
    fprintf(fid, '## End script generated by mjsWriteAwsCliScript.m\n');
    fprintf(fid, '\n');
    
    fclose(fid);
    
catch err
    fclose(fid);
    rethrow(err);
end

system(['chmod +x ' awsCliScriptFile]);
